{"ast":null,"code":"import _regeneratorRuntime from \"/Users/admin/Desktop/my-code/UCB/SnackTime/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/admin/Desktop/my-code/UCB/SnackTime/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/admin/Desktop/my-code/UCB/SnackTime/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/admin/Desktop/my-code/UCB/SnackTime/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/admin/Desktop/my-code/UCB/SnackTime/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/admin/Desktop/my-code/UCB/SnackTime/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/admin/Desktop/my-code/UCB/SnackTime/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/admin/Desktop/my-code/UCB/SnackTime/client/src/pages/_StaffPages/UpdateDailyReport/AddNap/AddNap.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types'; //import classNames from 'classnames';\n\nimport { withStyles } from '@material-ui/core/styles'; // import MenuItem from '@material-ui/core/MenuItem';\n// import TextField from '@material-ui/core/TextField';\n// import Paper from '@material-ui/core/Paper';\n\nimport Button from '@material-ui/core/Button';\nimport HeaderBar from '../../../../components/HeaderBar/HeaderBar';\nimport { Redirect } from 'react-router-dom';\nimport Auth from '../../../../utils/Auth';\nimport MultiSelectContainer from '../MultiSelect/MultiSelectContainer';\nimport Timepicker from '../../../../components/TimePicker/TimePicker';\nimport './AddNap.css';\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nvar styles = function styles(theme) {\n  return {\n    container: {\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    submitbutton: {\n      marginTop: 25,\n      height: 10\n    },\n    textField: {\n      marginLeft: theme.spacing.unit,\n      marginRight: theme.spacing.unit,\n      width: 200\n    },\n    dense: {\n      marginTop: 19\n    },\n    menu: {\n      width: 200\n    }\n  };\n};\n\nvar AddNap =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddNap, _React$Component);\n\n  function AddNap() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AddNap);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AddNap)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      //selectedStudents: this.props.location.state.selectedStudents,\n      napStart: '',\n      napEnd: '',\n      multiline: 'Controlled',\n      allStudents: [],\n      studentIdsToSubmit: [],\n      loginRejected: false,\n      loggedIn: false,\n      snackbarMessage: \"No Student Selected.\"\n    };\n    _this.timepickerState1 = React.createRef();\n    _this.timepickerState2 = React.createRef();\n\n    _this.updateStudents = function (newArray) {\n      _this.setState({\n        allStudents: newArray\n      });\n    };\n\n    _this.handleSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(event) {\n        var napStart, napEnd, idArray;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event.preventDefault();\n                napStart = _this.timepickerState1.current.returnTime();\n                napEnd = _this.timepickerState2.current.returnTime();\n                _context.next = 5;\n                return _this.setState({\n                  napStart: napStart,\n                  napEnd: napEnd\n                });\n\n              case 5:\n                idArray = [];\n\n                _this.state.allStudents.map(function (student) {\n                  if (student.selected === true) {\n                    idArray.push(student.id);\n                  }\n                });\n\n                console.log(idArray);\n                _context.next = 10;\n                return _this.setState({\n                  studentIdsToSubmit: idArray\n                });\n\n              case 10:\n                if (_this.state.studentIdsToSubmit.length === 0) _this.handleClickSnackbar();else _this.state.studentIdsToSubmit.map(function (id) {\n                  return _this.postNap(id);\n                });\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.handleChange = function (event) {\n      console.log(event.target); // this.setState({\n      //   [name]: event.target.value,\n      // });\n\n      console.log('NAP START, END', _this.state.napStart, _this.state.napEnd);\n    };\n\n    _this.setNapStart = function (time) {\n      _this.setState({\n        napStart: time\n      });\n    };\n\n    _this.setNapEnd = function (time) {\n      _this.setState({\n        napEnd: time\n      });\n    };\n\n    _this.handleClickSnackbar = function () {\n      _this.setState({\n        open: true\n      });\n    };\n\n    _this.handleCloseSnackbar = function (event, reason) {\n      if (reason === \"clickaway\") {\n        return;\n      }\n\n      _this.setState({\n        open: false\n      });\n    };\n\n    _this.postNap =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(id) {\n        var today, date;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                today = new Date();\n                date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n                console.log(date);\n\n                if (!(_this.state.napStart < _this.state.napEnd)) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                fetch(\"/api/student/\".concat(id, \"/nap\"), {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify({\n                    napStart: _this.state.napStart,\n                    napEnd: _this.state.napEnd,\n                    date: date\n                  })\n                }).then(function (resp) {\n                  console.log(resp);\n                  return resp.json();\n                }).then(function (resp) {\n                  _this.setState({\n                    snackbarMessage: \"Nap added.\"\n                  }, _this.handleClickSnackbar());\n                });\n                _context2.next = 10;\n                break;\n\n              case 7:\n                _context2.next = 9;\n                return _this.setState({\n                  snackbarMessage: \"End Time should be greater than Start Time\"\n                });\n\n              case 9:\n                _this.handleClickSnackbar();\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(AddNap, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return Auth.StaffAuthorize(this);\n\n              case 2:\n                console.log(this.state.orgId);\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          theme = _this$props.theme;\n\n      if (this.state.loggedIn) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148\n          },\n          __self: this\n        }, React.createElement(HeaderBar, {\n          type: this.state.userType,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149\n          },\n          __self: this\n        }), React.createElement(MultiSelectContainer, {\n          orgId: this.state.orgId,\n          allStudents: this.state.allStudents,\n          updateStudents: this.updateStudents,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"addnap-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"addnap-tp-1\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }, \"Nap Start:\", React.createElement(Timepicker, {\n          ref: this.timepickerState1,\n          setTime: this.setNapStart,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"addnap-tp-2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165\n          },\n          __self: this\n        }, \"Nap End:\", React.createElement(Timepicker, {\n          ref: this.timepickerState2,\n          className: \"addnap-tp-2\",\n          setTime: this.setNapEnd,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          },\n          __self: this\n        })), React.createElement(Button, {\n          className: classes.submitbutton,\n          onClick: this.handleSubmit // color='default'\n          ,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175\n          },\n          __self: this\n        }, \"Add Activity\")), React.createElement(Snackbar, {\n          anchorOrigin: {\n            vertical: \"bottom\",\n            horizontal: \"left\"\n          },\n          open: this.state.open,\n          autoHideDuration: 6000,\n          onClose: this.handleCloseSnackbar,\n          ContentProps: {\n            \"aria-describedby\": \"message-id\"\n          },\n          message: React.createElement(\"span\", {\n            id: \"message-id\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 195\n            },\n            __self: this\n          }, this.state.snackbarMessage),\n          action: [React.createElement(IconButton, {\n            key: \"close\",\n            \"aria-label\": \"Close\",\n            color: \"inherit\",\n            className: classes.close,\n            onClick: this.handleCloseSnackbar,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 197\n            },\n            __self: this\n          }, React.createElement(CloseIcon, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 204\n            },\n            __self: this\n          }))],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184\n          },\n          __self: this\n        }));\n      } else if (this.state.loginRejected) {\n        return React.createElement(Redirect, {\n          to: {\n            pathname: '/notAuthorized',\n            state: {\n              type: 'Staff',\n              location: '/dailyreport/addnap'\n            }\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 213\n          },\n          __self: this\n        });\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224\n          },\n          __self: this\n        });\n      }\n    }\n  }]);\n\n  return AddNap;\n}(React.Component);\n\nAddNap.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(AddNap);","map":{"version":3,"sources":["/Users/admin/Desktop/my-code/UCB/SnackTime/client/src/pages/_StaffPages/UpdateDailyReport/AddNap/AddNap.jsx"],"names":["React","PropTypes","withStyles","Button","HeaderBar","Redirect","Auth","MultiSelectContainer","Timepicker","Snackbar","IconButton","CloseIcon","styles","theme","container","display","flexWrap","submitbutton","marginTop","height","textField","marginLeft","spacing","unit","marginRight","width","dense","menu","AddNap","state","napStart","napEnd","multiline","allStudents","studentIdsToSubmit","loginRejected","loggedIn","snackbarMessage","timepickerState1","createRef","timepickerState2","updateStudents","newArray","setState","handleSubmit","event","preventDefault","current","returnTime","idArray","map","student","selected","push","id","console","log","length","handleClickSnackbar","postNap","handleChange","target","setNapStart","time","setNapEnd","open","handleCloseSnackbar","reason","today","Date","date","getFullYear","getMonth","getDate","fetch","method","headers","body","JSON","stringify","then","resp","json","StaffAuthorize","orgId","props","classes","userType","vertical","horizontal","close","pathname","type","location","Component","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n//import classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\n// import MenuItem from '@material-ui/core/MenuItem';\n// import TextField from '@material-ui/core/TextField';\n// import Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport HeaderBar from '../../../../components/HeaderBar/HeaderBar';\nimport { Redirect } from 'react-router-dom';\nimport Auth from '../../../../utils/Auth';\nimport MultiSelectContainer from '../MultiSelect/MultiSelectContainer';\nimport Timepicker from '../../../../components/TimePicker/TimePicker';\nimport './AddNap.css';\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nconst styles = theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  submitbutton: {\n    marginTop: 25,\n    height: 10,\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n    width: 200,\n  },\n  dense: {\n    marginTop: 19,\n  },\n  menu: {\n    width: 200,\n  },\n});\n\nclass AddNap extends React.Component {\n  state = {\n    //selectedStudents: this.props.location.state.selectedStudents,\n    napStart: '',\n    napEnd: '',\n    multiline: 'Controlled',\n    allStudents: [],\n    studentIdsToSubmit: [],\n    loginRejected: false,\n    loggedIn: false,\n    snackbarMessage: \"No Student Selected.\"\n  };\n\n  timepickerState1 = React.createRef();\n  timepickerState2 = React.createRef();\n\n  async componentWillMount() {\n    await Auth.StaffAuthorize(this);\n    console.log(this.state.orgId);\n  }\n\n  updateStudents = newArray => {\n    this.setState({ allStudents: newArray });\n  };\n  handleSubmit = async event => {\n    event.preventDefault();\n    const napStart = this.timepickerState1.current.returnTime();\n    const napEnd = this.timepickerState2.current.returnTime();\n    await this.setState({ napStart, napEnd });\n    let idArray = [];\n    this.state.allStudents.map(student => {\n      if (student.selected === true) {\n        idArray.push(student.id);\n      }\n    });\n    console.log(idArray);\n    await this.setState({ studentIdsToSubmit: idArray });\n    if (this.state.studentIdsToSubmit.length === 0)\n      this.handleClickSnackbar();\n    else this.state.studentIdsToSubmit.map(id => this.postNap(id));\n  };\n\n  handleChange = event => {\n    console.log(event.target);\n    // this.setState({\n    //   [name]: event.target.value,\n    // });\n    console.log('NAP START, END', this.state.napStart, this.state.napEnd);\n  };\n\n  setNapStart = time => {\n    this.setState({ napStart: time });\n  };\n\n  setNapEnd = time => {\n    this.setState({ napEnd: time });\n  };\n\n  handleClickSnackbar = () => {\n    this.setState({ open: true });\n  };\n  handleCloseSnackbar = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    this.setState({ open: false });\n  };\n\n  postNap = async id => {\n    let today = new Date();\n    let date =\n      today.getFullYear() +\n      '-' +\n      (today.getMonth() + 1) +\n      '-' +\n      today.getDate();\n    console.log(date);\n    if(this.state.napStart < this.state.napEnd){\n      fetch(`/api/student/${id}/nap`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          napStart: this.state.napStart,\n          napEnd: this.state.napEnd,\n          date: date,\n        }),\n      })\n        .then(resp => {\n          console.log(resp);\n          return resp.json();\n        })\n        .then(resp => {\n          this.setState({ snackbarMessage: \"Nap added.\" },this.handleClickSnackbar())\n        });\n      }\n      else{\n        await this.setState({ snackbarMessage: \"End Time should be greater than Start Time\" })\n        this.handleClickSnackbar();\n      }\n    \n  };\n\n  render() {\n    const { classes, theme } = this.props;\n\n    if (this.state.loggedIn) {\n      return (\n        <div>\n          <HeaderBar type={this.state.userType} />\n          <MultiSelectContainer\n            orgId={this.state.orgId}\n            allStudents={this.state.allStudents}\n            updateStudents={this.updateStudents}\n          />\n\n          <div className=\"addnap-container\">\n            <div className=\"addnap-tp-1\">\n              Nap Start:\n              <Timepicker\n                ref={this.timepickerState1}\n                setTime={this.setNapStart}\n              />\n            </div>\n\n            <div className=\"addnap-tp-2\">\n              Nap End:\n              <Timepicker\n                ref={this.timepickerState2}\n                className=\"addnap-tp-2\"\n                setTime={this.setNapEnd}\n              />\n            </div>\n\n\n            <Button\n              className={classes.submitbutton}\n              onClick={this.handleSubmit}\n            // color='default'\n            >\n              Add Activity\n            </Button>\n          </div>\n\n          <Snackbar\n            anchorOrigin={{\n              vertical: \"bottom\",\n              horizontal: \"left\"\n            }}\n            open={this.state.open}\n            autoHideDuration={6000}\n            onClose={this.handleCloseSnackbar}\n            ContentProps={{\n              \"aria-describedby\": \"message-id\"\n            }}\n            message={<span id=\"message-id\">{this.state.snackbarMessage}</span>}\n            action={[\n              <IconButton\n                key=\"close\"\n                aria-label=\"Close\"\n                color=\"inherit\"\n                className={classes.close}\n                onClick={this.handleCloseSnackbar}\n              >\n                <CloseIcon />\n              </IconButton>\n            ]}\n          />\n\n        </div>\n      );\n    } else if (this.state.loginRejected) {\n      return (\n        <Redirect\n          to={{\n            pathname: '/notAuthorized',\n            state: {\n              type: 'Staff',\n              location: '/dailyreport/addnap',\n            },\n          }}\n        />\n      );\n    } else {\n      return <div />;\n    }\n  }\n}\n\nAddNap.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(AddNap);\n"]},"metadata":{},"sourceType":"module"}