{"ast":null,"code":"import _regeneratorRuntime from \"/Users/admin/Desktop/my-code/UCB/SnackTime/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/admin/Desktop/my-code/UCB/SnackTime/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nexport default {\n  StaffAuthorize: function () {\n    var _StaffAuthorize = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(page, studentOrg) {\n      var data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('/auth/loggedin');\n\n            case 2:\n              _context.next = 4;\n              return _context.sent.json();\n\n            case 4:\n              data = _context.sent;\n\n              if (data.orgId) {\n                _context.next = 10;\n                break;\n              }\n\n              console.log('LOGIN REJECTED org id');\n              page.setState({\n                loginRejected: true\n              });\n              _context.next = 25;\n              break;\n\n            case 10:\n              if (!(data.userType !== 'staff')) {\n                _context.next = 15;\n                break;\n              }\n\n              console.log('LOGIN REJECTED user type');\n              page.setState({\n                orgUserCheck: false\n              }); //If we are checking a student page, check to make sure user and student are from same organization\n\n              _context.next = 25;\n              break;\n\n            case 15:\n              if (!(studentOrg && data.orgId !== studentOrg)) {\n                _context.next = 20;\n                break;\n              }\n\n              console.log('LOGIN REJECTED same org');\n              page.setState({\n                orgUserCheck: false\n              }); //Validate user/student have same organization or only user if no student organization is provided\n\n              _context.next = 25;\n              break;\n\n            case 20:\n              if (!(studentOrg && data.orgId === studentOrg || data.userId && !studentOrg)) {\n                _context.next = 25;\n                break;\n              }\n\n              console.log('USER AUTHORIZED');\n              _context.next = 24;\n              return page.setState({\n                userName: data.name,\n                userId: data.userId,\n                userType: data.userType,\n                orgName: data.orgName,\n                orgId: data.orgId,\n                loginRejected: false,\n                loggedIn: true,\n                orgUserCheck: true\n              });\n\n            case 24:\n              console.log('STATE', page.state);\n\n            case 25:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function StaffAuthorize(_x, _x2) {\n      return _StaffAuthorize.apply(this, arguments);\n    };\n  }(),\n  ParentAuthorize: function () {\n    var _ParentAuthorize = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(page) {\n      var data;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              console.log('parent authorize');\n              _context2.next = 3;\n              return fetch('/auth/loggedin');\n\n            case 3:\n              _context2.next = 5;\n              return _context2.sent.json();\n\n            case 5:\n              data = _context2.sent;\n              //If user is not logged in, send them to login\n              console.log('data', data);\n\n              if (!data.userId) {\n                console.log('LOGIN REJECTED ');\n                page.setState({\n                  loginRejected: true\n                });\n              } else if (data.userType !== 'parent') {\n                page.setState({\n                  orgUserCheck: false\n                }); //If we are checking a student page, check to make sure user and student are from same organization\n              } else if (data.userId) {\n                console.log('USER AUTHORIZED');\n                console.log(data.userType);\n                page.setState({\n                  userName: data.name,\n                  userId: data.userId,\n                  userType: data.userType,\n                  orgName: data.orgName,\n                  students: data.student,\n                  loginRejected: false,\n                  loggedIn: true,\n                  orgUserCheck: true\n                });\n              }\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function ParentAuthorize(_x3) {\n      return _ParentAuthorize.apply(this, arguments);\n    };\n  }()\n};","map":{"version":3,"sources":["/Users/admin/Desktop/my-code/UCB/SnackTime/client/src/utils/Auth.js"],"names":["StaffAuthorize","page","studentOrg","fetch","json","data","orgId","console","log","setState","loginRejected","userType","orgUserCheck","userId","userName","name","orgName","loggedIn","state","ParentAuthorize","students","student"],"mappings":"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","sourcesContent":["export default {\n\n\n  StaffAuthorize: async function (page, studentOrg) {\n    let data = await (await fetch('/auth/loggedin')).json();\n    //If user is not logged in, send them to login\n    if (!data.orgId) {\n      console.log('LOGIN REJECTED org id')\n      page.setState({\n        loginRejected: true,\n      });\n    } else if (data.userType !== 'staff') {\n      console.log('LOGIN REJECTED user type')\n      page.setState({\n        orgUserCheck: false,\n      });\n      //If we are checking a student page, check to make sure user and student are from same organization\n    } else if (studentOrg && data.orgId !== studentOrg) {\n      console.log('LOGIN REJECTED same org')\n\n      page.setState({\n        orgUserCheck: false,\n      });\n      //Validate user/student have same organization or only user if no student organization is provided\n    } else if (\n      (studentOrg && data.orgId === studentOrg) ||\n      (data.userId && !studentOrg)\n    ) {\n      console.log('USER AUTHORIZED');\n        await page.setState({\n          userName: data.name,\n          userId: data.userId,\n          userType: data.userType,\n          orgName: data.orgName,\n          orgId: data.orgId,\n          loginRejected: false,\n          loggedIn: true,\n          orgUserCheck: true,\n        });\n        console.log('STATE', page.state)\n    }\n  },\n\n  ParentAuthorize: async function (page) {\n    console.log('parent authorize')\n    let data = await (await fetch('/auth/loggedin')).json();\n    //If user is not logged in, send them to login\n    console.log('data', data);\n    if (!data.userId) {\n      console.log('LOGIN REJECTED ')\n      page.setState({\n        loginRejected: true,\n      });\n    } else if (data.userType !== 'parent') {\n      page.setState({\n        orgUserCheck: false,\n      });\n      //If we are checking a student page, check to make sure user and student are from same organization\n    } else if (data.userId) {\n      console.log('USER AUTHORIZED');\n      console.log(data.userType)\n      page.setState({\n        userName: data.name,\n        userId: data.userId,\n        userType: data.userType,\n        orgName: data.orgName,\n        students: data.student,\n        loginRejected: false,\n        loggedIn: true,\n        orgUserCheck: true,\n      });\n    }\n  },\n};\n"]},"metadata":{},"sourceType":"module"}