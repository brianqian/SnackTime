{"ast":null,"code":"'use strict';\n\nvar _typeof = require(\"/Users/admin/Desktop/my-code/UCB/SnackTime/client/node_modules/@babel/runtime/helpers/typeof\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _TileGroup = require('../TileGroup');\n\nvar _TileGroup2 = _interopRequireDefault(_TileGroup);\n\nvar _Day = require('./Day');\n\nvar _Day2 = _interopRequireDefault(_Day);\n\nvar _dates = require('../shared/dates');\n\nvar _propTypes3 = require('../shared/propTypes');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (_typeof(call) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + _typeof(superClass));\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Days = function (_PureComponent) {\n  _inherits(Days, _PureComponent);\n\n  function Days() {\n    _classCallCheck(this, Days);\n\n    return _possibleConstructorReturn(this, (Days.__proto__ || Object.getPrototypeOf(Days)).apply(this, arguments));\n  }\n\n  _createClass(Days, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var monthIndex = this.monthIndex;\n\n      var _props = this.props,\n          showNeighboringMonth = _props.showNeighboringMonth,\n          otherProps = _objectWithoutProperties(_props, ['showNeighboringMonth']);\n\n      return _react2.default.createElement(_TileGroup2.default, _extends({}, otherProps, {\n        className: 'react-calendar__month-view__days',\n        count: 7,\n        dateTransform: function dateTransform(day) {\n          return new Date(_this2.year, monthIndex, day);\n        },\n        dateType: 'day',\n        end: this.end,\n        offset: this.offset,\n        start: this.start,\n        tile: _Day2.default // Tile props\n        ,\n        currentMonthIndex: monthIndex\n      }));\n    }\n  }, {\n    key: 'offset',\n    get: function get() {\n      var _props2 = this.props,\n          showFixedNumberOfWeeks = _props2.showFixedNumberOfWeeks,\n          showNeighboringMonth = _props2.showNeighboringMonth;\n\n      if (showFixedNumberOfWeeks || showNeighboringMonth) {\n        return 0;\n      }\n\n      var _props3 = this.props,\n          activeStartDate = _props3.activeStartDate,\n          calendarType = _props3.calendarType;\n      return (0, _dates.getDayOfWeek)(activeStartDate, calendarType);\n    }\n    /**\n     * Defines on which day of the month the grid shall start. If we simply show current\n     * month, we obviously start on day one, but if showNeighboringMonth is set to\n     * true, we need to find the beginning of the week the first day of the month is in.\n     */\n\n  }, {\n    key: 'start',\n    get: function get() {\n      var _props4 = this.props,\n          showFixedNumberOfWeeks = _props4.showFixedNumberOfWeeks,\n          showNeighboringMonth = _props4.showNeighboringMonth;\n\n      if (showFixedNumberOfWeeks || showNeighboringMonth) {\n        var _props5 = this.props,\n            activeStartDate = _props5.activeStartDate,\n            calendarType = _props5.calendarType;\n        return -(0, _dates.getDayOfWeek)(activeStartDate, calendarType) + 1;\n      }\n\n      return 1;\n    }\n    /**\n     * Defines on which day of the month the grid shall end. If we simply show current\n     * month, we need to stop on the last day of the month, but if showNeighboringMonth\n     * is set to true, we need to find the end of the week the last day of the month is in.\n     */\n\n  }, {\n    key: 'end',\n    get: function get() {\n      var _props6 = this.props,\n          activeStartDate = _props6.activeStartDate,\n          showFixedNumberOfWeeks = _props6.showFixedNumberOfWeeks,\n          showNeighboringMonth = _props6.showNeighboringMonth;\n      var daysInMonth = (0, _dates.getDaysInMonth)(activeStartDate);\n\n      if (showFixedNumberOfWeeks) {\n        // Always show 6 weeks\n        return this.start + 6 * 7 - 1;\n      }\n\n      if (showNeighboringMonth) {\n        var year = this.year,\n            monthIndex = this.monthIndex;\n        var calendarType = this.props.calendarType;\n        var activeEndDate = new Date(year, monthIndex, daysInMonth);\n        return daysInMonth + (7 - (0, _dates.getDayOfWeek)(activeEndDate, calendarType) - 1);\n      }\n\n      return daysInMonth;\n    }\n  }, {\n    key: 'year',\n    get: function get() {\n      var activeStartDate = this.props.activeStartDate;\n      return (0, _dates.getYear)(activeStartDate);\n    }\n  }, {\n    key: 'monthIndex',\n    get: function get() {\n      var activeStartDate = this.props.activeStartDate;\n      return (0, _dates.getMonthIndex)(activeStartDate);\n    }\n  }]);\n\n  return Days;\n}(_react.PureComponent);\n\nexports.default = Days;\nDays.propTypes = _extends({\n  calendarType: _propTypes3.isCalendarType.isRequired,\n  showFixedNumberOfWeeks: _propTypes2.default.bool,\n  showNeighboringMonth: _propTypes2.default.bool\n}, _propTypes3.tileGroupProps);","map":null,"metadata":{},"sourceType":"script"}