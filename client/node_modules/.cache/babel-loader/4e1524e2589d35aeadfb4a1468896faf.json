{"ast":null,"code":"import _defineProperty from \"/Users/admin/Desktop/my-code/UCB/SnackTime/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/admin/Desktop/my-code/UCB/SnackTime/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/admin/Desktop/my-code/UCB/SnackTime/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/admin/Desktop/my-code/UCB/SnackTime/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/admin/Desktop/my-code/UCB/SnackTime/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/admin/Desktop/my-code/UCB/SnackTime/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/admin/Desktop/my-code/UCB/SnackTime/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/admin/Desktop/my-code/UCB/SnackTime/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/admin/Desktop/my-code/UCB/SnackTime/client/src/pages/_StaffPages/UpdateDailyReport/AddIncident/AddIncident.jsx\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport HeaderBar from \"../../../../components/HeaderBar/HeaderBar\";\nimport { Redirect } from \"react-router-dom\";\nimport Auth from \"../../../../utils/Auth\";\nimport MultiSelectContainer from \"../MultiSelect/MultiSelectContainer\";\nimport Timepicker from \"../../../../components/TimePicker/TimePicker\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport './AddIncident.css';\n\nvar styles = function styles(theme) {\n  return {\n    container: {\n      display: \"flex\",\n      flexWrap: \"wrap\"\n    },\n    submitbutton: {\n      marginTop: 25,\n      height: 10\n    },\n    textField: {\n      marginLeft: theme.spacing.unit,\n      marginRight: theme.spacing.unit,\n      width: 200\n    },\n    dense: {\n      marginTop: 19\n    },\n    menu: {\n      width: 200\n    }\n  };\n};\n\nvar AddIncident =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddIncident, _React$Component);\n\n  function AddIncident() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AddIncident);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AddIncident)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      selectedStudents: [],\n      time: \"\",\n      incident: \"\",\n      multiline: \"Controlled\",\n      allStudents: [],\n      studentIdsToSubmit: [],\n      snackbarMessage: 'No student selected'\n    };\n    _this.timepickerState = React.createRef();\n\n    _this.updateStudents = function (newArray) {\n      _this.setState({\n        allStudents: newArray\n      });\n    };\n\n    _this.handleSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(event) {\n        var time, idArray;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event.preventDefault();\n                time = _this.timepickerState.current.returnTime();\n                _context.next = 4;\n                return _this.setState({\n                  time: time\n                });\n\n              case 4:\n                idArray = [];\n\n                _this.state.allStudents.map(function (student) {\n                  if (student.selected === true) {\n                    idArray.push(student.id);\n                  }\n                });\n\n                console.log(idArray);\n                _context.next = 9;\n                return _this.setState({\n                  studentIdsToSubmit: idArray\n                });\n\n              case 9:\n                if (_this.state.studentIdsToSubmit.length === 0) _this.handleClickSnackbar();else _this.state.studentIdsToSubmit.map(function (id) {\n                  return _this.postIncident(id);\n                });\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.handleChange = function (name) {\n      return function (event) {\n        _this.setState(_defineProperty({}, name, event.target.value));\n      };\n    };\n\n    _this.postIncident = function (id) {\n      var today = new Date();\n      var date = today.getFullYear() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getDate();\n      console.log(date);\n      fetch(\"/api/student/\".concat(id, \"/incident\"), {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          time: _this.state.time,\n          incident: _this.state.incident,\n          date: date\n        })\n      }).then(function (resp) {\n        console.log(\"Resp1:\", resp);\n        return resp.json();\n      }).then(function (resp) {\n        console.log(\"Resp2:\", resp);\n\n        if (resp.errors) {\n          if (resp.errors.length > 0) {\n            if (resp.errors[0].message === \"Validation notEmpty on incident failed\") _this.setState({\n              snackbarMessage: \"Please write incident\"\n            }, _this.handleClickSnackbar());\n          }\n        } else if (resp) {\n          _this.setState({\n            snackbarMessage: \"Incident added.\"\n          }, _this.handleClickSnackbar());\n        }\n      });\n    };\n\n    _this.handleClickSnackbar = function () {\n      _this.setState({\n        open: true\n      });\n    };\n\n    _this.handleCloseSnackbar = function (event, reason) {\n      if (reason === \"clickaway\") {\n        return;\n      }\n\n      _this.setState({\n        open: false\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(AddIncident, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                Auth.StaffAuthorize(this);\n                console.log(\"hello\");\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var classes = this.props.classes;\n\n      if (this.state.loggedIn) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }, React.createElement(HeaderBar, {\n          type: this.state.userType,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }), React.createElement(MultiSelectContainer, {\n          orgId: this.state.orgId,\n          allStudents: this.state.allStudents,\n          updateStudents: this.updateStudents,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"addincident-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"addincident-item1\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }, React.createElement(Timepicker, {\n          ref: this.timepickerState,\n          setTime: this.setIncidentTime,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"addincident-item2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        }, React.createElement(TextField, {\n          required: true,\n          label: \"Indcident\",\n          className: classes.textField,\n          value: this.state.medName,\n          onChange: this.handleChange(\"incident\"),\n          multiline: true,\n          rows: \"4\",\n          margin: \"normal\",\n          variant: \"outlined\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          },\n          __self: this\n        })), React.createElement(Button, {\n          className: classes.submitbutton,\n          onClick: this.handleSubmit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        }, \"Add Activity\")), React.createElement(Snackbar, {\n          anchorOrigin: {\n            vertical: \"bottom\",\n            horizontal: \"left\"\n          },\n          open: this.state.open,\n          autoHideDuration: 6000,\n          onClose: this.handleCloseSnackbar,\n          ContentProps: {\n            \"aria-describedby\": \"message-id\"\n          },\n          message: React.createElement(\"span\", {\n            id: \"message-id\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 172\n            },\n            __self: this\n          }, this.state.snackbarMessage),\n          action: [React.createElement(IconButton, {\n            key: \"close\",\n            \"aria-label\": \"Close\",\n            color: \"inherit\",\n            className: classes.close,\n            onClick: this.handleCloseSnackbar,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 174\n            },\n            __self: this\n          }, React.createElement(CloseIcon, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 181\n            },\n            __self: this\n          }))],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        }));\n      } else if (this.state.loginRejected) {\n        return React.createElement(Redirect, {\n          to: {\n            pathname: \"/notAuthorized\",\n            state: {\n              type: \"Staff\",\n              location: \"/dailyreport/addincident\"\n            }\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 189\n          },\n          __self: this\n        });\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 200\n          },\n          __self: this\n        });\n      }\n    }\n  }]);\n\n  return AddIncident;\n}(React.Component);\n\nAddIncident.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(AddIncident);","map":{"version":3,"sources":["/Users/admin/Desktop/my-code/UCB/SnackTime/client/src/pages/_StaffPages/UpdateDailyReport/AddIncident/AddIncident.jsx"],"names":["React","PropTypes","withStyles","TextField","Button","HeaderBar","Redirect","Auth","MultiSelectContainer","Timepicker","Snackbar","IconButton","CloseIcon","styles","theme","container","display","flexWrap","submitbutton","marginTop","height","textField","marginLeft","spacing","unit","marginRight","width","dense","menu","AddIncident","state","selectedStudents","time","incident","multiline","allStudents","studentIdsToSubmit","snackbarMessage","timepickerState","createRef","updateStudents","newArray","setState","handleSubmit","event","preventDefault","current","returnTime","idArray","map","student","selected","push","id","console","log","length","handleClickSnackbar","postIncident","handleChange","name","target","value","today","Date","date","getFullYear","getMonth","getDate","fetch","method","headers","body","JSON","stringify","then","resp","json","errors","message","open","handleCloseSnackbar","reason","StaffAuthorize","classes","props","loggedIn","userType","orgId","setIncidentTime","medName","vertical","horizontal","close","loginRejected","pathname","type","location","Component","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport HeaderBar from \"../../../../components/HeaderBar/HeaderBar\";\n\nimport { Redirect } from \"react-router-dom\";\nimport Auth from \"../../../../utils/Auth\";\nimport MultiSelectContainer from \"../MultiSelect/MultiSelectContainer\";\nimport Timepicker from \"../../../../components/TimePicker/TimePicker\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport './AddIncident.css'\n\nconst styles = theme => ({\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  submitbutton: {\n    marginTop: 25,\n    height: 10\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n    width: 200\n  },\n  dense: {\n    marginTop: 19\n  },\n  menu: {\n    width: 200\n  }\n});\n\nclass AddIncident extends React.Component {\n  state = {\n    selectedStudents: [],\n    time: \"\",\n    incident: \"\",\n    multiline: \"Controlled\",\n    allStudents: [],\n    studentIdsToSubmit: [],\n    snackbarMessage: 'No student selected'\n  };\n\n  timepickerState = React.createRef();\n\n  async componentWillMount() {\n    Auth.StaffAuthorize(this);\n    console.log(\"hello\");\n  }\n  updateStudents = newArray => {\n    this.setState({ allStudents: newArray });\n  };\n  handleSubmit = async event => {\n    event.preventDefault();\n    const time = this.timepickerState.current.returnTime();\n    await this.setState({ time })\n    let idArray = [];\n    this.state.allStudents.map(student => {\n      if (student.selected === true) {\n        idArray.push(student.id);\n      }\n    });\n    console.log(idArray);\n    await this.setState({ studentIdsToSubmit: idArray });\n    if (this.state.studentIdsToSubmit.length === 0)\n      this.handleClickSnackbar();\n    else\n      this.state.studentIdsToSubmit.map(id => this.postIncident(id));\n  };\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value\n    });\n  };\n  postIncident = id => {\n    let today = new Date();\n    let date =\n      today.getFullYear() +\n      \"-\" +\n      (today.getMonth() + 1) +\n      \"-\" +\n      today.getDate();\n    console.log(date);\n    fetch(`/api/student/${id}/incident`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        time: this.state.time,\n        incident: this.state.incident,\n        date: date\n      })\n    })\n      .then(resp => {\n        console.log(\"Resp1:\", resp);\n        return resp.json();\n      })\n      .then(resp => {\n        console.log(\"Resp2:\", resp)\n        if (resp.errors) {\n          if (resp.errors.length > 0) {\n            if (resp.errors[0].message === \"Validation notEmpty on incident failed\")\n              this.setState({ snackbarMessage: \"Please write incident\" }, this.handleClickSnackbar())\n          }\n        } else if (resp) {\n          this.setState({ snackbarMessage: \"Incident added.\" },\n            this.handleClickSnackbar())\n        }\n      });\n  };\n\n  handleClickSnackbar = () => {\n    this.setState({ open: true });\n  };\n  handleCloseSnackbar = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    this.setState({ open: false });\n  };\n\n  render() {\n    const { classes } = this.props;\n    if (this.state.loggedIn) {\n      return (\n        <div>\n          <HeaderBar type={this.state.userType} />\n          <MultiSelectContainer\n            orgId={this.state.orgId}\n            allStudents={this.state.allStudents}\n            updateStudents={this.updateStudents}\n          />\n\n          <div className=\"addincident-container\">\n            <div className=\"addincident-item1\">\n              <Timepicker ref={this.timepickerState} setTime={this.setIncidentTime} />\n            </div>\n\n            <div className='addincident-item2'>\n              <TextField\n                required\n                label=\"Indcident\"\n                className={classes.textField}\n                value={this.state.medName}\n                onChange={this.handleChange(\"incident\")}\n                multiline\n                rows='4'\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n            </div>\n            <Button className={classes.submitbutton} onClick={this.handleSubmit}>Add Activity</Button>\n          </div>\n          <Snackbar\n            anchorOrigin={{\n              vertical: \"bottom\",\n              horizontal: \"left\"\n            }}\n            open={this.state.open}\n            autoHideDuration={6000}\n            onClose={this.handleCloseSnackbar}\n            ContentProps={{\n              \"aria-describedby\": \"message-id\"\n            }}\n            message={<span id=\"message-id\">{this.state.snackbarMessage}</span>}\n            action={[\n              <IconButton\n                key=\"close\"\n                aria-label=\"Close\"\n                color=\"inherit\"\n                className={classes.close}\n                onClick={this.handleCloseSnackbar}\n              >\n                <CloseIcon />\n              </IconButton>\n            ]}\n          />\n        </div>\n      );\n    } else if (this.state.loginRejected) {\n      return (\n        <Redirect\n          to={{\n            pathname: \"/notAuthorized\",\n            state: {\n              type: \"Staff\",\n              location: \"/dailyreport/addincident\"\n            }\n          }}\n        />\n      );\n    } else {\n      return <div />;\n    }\n  }\n}\n\nAddIncident.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(AddIncident);\n"]},"metadata":{},"sourceType":"module"}